add jar hdfs://10.10.10.160:9000/Library/hiveudf-1.0.jar;


CREATE EXTERNAL TABLE IF NOT EXISTS CDC_MLF_ZONE (
    ZONE_ID BIGINT,
    GEO_ZONE_ID BIGINT,
    GEO_ZONE_NAME String,
    GEO_ZONE_SIDO_CODE String,
    GEO_ZONE_SIDO_NAME String,
    GEO_LATITUDE String,
    GEO_LONGITUDE String,
    GEO_RADIUS String,
    GEO_ORG_ID String,
    GEO_TYPE String,
    SAVING_AFFILIATE_ID String,
    SAVING_AFFILIATE_NAME String,
    EXPECTATION_COUNT BIGINT,
    INFORMATION1 String,
    INFORMATION2 String,
    REQUISITION_TYPE String,
    TARGETING_ID BIGINT,
    CREATED_BY BIGINT,
    CREATED_ID String,
    CREATED_NAME String,
    CREATED_DATE String,
    SAVING_AFFILIATE_BIZNO String
)
PARTITIONED BY(dt STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY "\t"
LOCATION '#<URL>/SERVICES_IAS/MLF/CDC/CDC_MLF_ZONE';

LOAD DATA INPATH '#<URL>/#inputPath#' OVERWRITE INTO TABLE CDC_MLF_ZONE PARTITION (dt='#{today}');

CREATE EXTERNAL TABLE IF NOT EXISTS MLF_ZONE (
    ZONE_ID BIGINT,
    GEO_ZONE_ID BIGINT,
    GEO_ZONE_NAME String,
    GEO_ZONE_SIDO_CODE String,
    GEO_ZONE_SIDO_NAME String,
    GEO_LATITUDE String,
    GEO_LONGITUDE String,
    GEO_RADIUS String,
    GEO_ORG_ID String,
    GEO_TYPE String,
    SAVING_AFFILIATE_ID String,
    SAVING_AFFILIATE_NAME String,
    EXPECTATION_COUNT BIGINT,
    INFORMATION1 String,
    INFORMATION2 String,
    REQUISITION_TYPE String,
    TARGETING_ID BIGINT,
    CREATED_BY BIGINT,
    CREATED_ID String,
    CREATED_NAME String,
    CREATED_DATE String,
    SAVING_AFFILIATE_BIZNO String,
    OPER_DTM string,
    EIUD_TYPE string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY "\t"
LOCATION '#<URL>/SERVICES_IAS/MLF/RAW/MLF_ZONE';

FROM (
SELECT cast(trim(IF(B.ZONE_ID IS NULL, A.ZONE_ID, B.ZONE_ID)) as BIGINT) ZONE_ID,
       cast(trim(IF(B.ZONE_ID IS NULL, A.GEO_ZONE_ID, B.GEO_ZONE_ID)) as BIGINT) GEO_ZONE_ID,
       trim(IF(B.ZONE_ID IS NULL, A.GEO_ZONE_NAME, B.GEO_ZONE_NAME)) GEO_ZONE_NAME,
       trim(IF(B.ZONE_ID IS NULL, A.GEO_ZONE_SIDO_CODE, B.GEO_ZONE_SIDO_CODE)) GEO_ZONE_SIDO_CODE,
       trim(IF(B.ZONE_ID IS NULL, A.GEO_ZONE_SIDO_NAME, B.GEO_ZONE_SIDO_NAME)) GEO_ZONE_SIDO_NAME,
       trim(IF(B.ZONE_ID IS NULL, A.GEO_LATITUDE, B.GEO_LATITUDE)) GEO_LATITUDE,
       trim(IF(B.ZONE_ID IS NULL, A.GEO_LONGITUDE, B.GEO_LONGITUDE)) GEO_LONGITUDE,
       trim(IF(B.ZONE_ID IS NULL, A.GEO_RADIUS, B.GEO_RADIUS)) GEO_RADIUS,
       trim(IF(B.ZONE_ID IS NULL, A.GEO_ORG_ID, B.GEO_ORG_ID)) GEO_ORG_ID,
       trim(IF(B.ZONE_ID IS NULL, A.GEO_TYPE, B.GEO_TYPE)) GEO_TYPE,
       trim(IF(B.ZONE_ID IS NULL, A.SAVING_AFFILIATE_ID, B.SAVING_AFFILIATE_ID)) SAVING_AFFILIATE_ID,
       trim(IF(B.ZONE_ID IS NULL, A.SAVING_AFFILIATE_NAME, B.SAVING_AFFILIATE_NAME)) SAVING_AFFILIATE_NAME,
       cast(trim(IF(B.ZONE_ID IS NULL, A.EXPECTATION_COUNT, B.EXPECTATION_COUNT)) as BIGINT) EXPECTATION_COUNT,
       trim(IF(B.ZONE_ID IS NULL, A.INFORMATION1, B.INFORMATION1)) INFORMATION1,
       trim(IF(B.ZONE_ID IS NULL, A.INFORMATION2, B.INFORMATION2)) INFORMATION2,
       trim(IF(B.ZONE_ID IS NULL, A.REQUISITION_TYPE, B.REQUISITION_TYPE)) REQUISITION_TYPE,
       cast(trim(IF(B.ZONE_ID IS NULL, A.TARGETING_ID, B.TARGETING_ID)) as BIGINT) TARGETING_ID,
       cast(trim(IF(B.ZONE_ID IS NULL, A.CREATED_BY, B.CREATED_BY)) as BIGINT) CREATED_BY,
       trim(IF(B.ZONE_ID IS NULL, A.CREATED_ID, B.CREATED_ID)) CREATED_ID,
       trim(IF(B.ZONE_ID IS NULL, A.CREATED_NAME, B.CREATED_NAME)) CREATED_NAME,
       trim(IF(B.ZONE_ID IS NULL, A.CREATED_DATE, B.CREATED_DATE)) CREATED_DATE,
       trim(IF(B.ZONE_ID IS NULL, A.SAVING_AFFILIATE_BIZNO, B.SAVING_AFFILIATE_BIZNO)) SAVING_AFFILIATE_BIZNO,
       IF(B.ZONE_ID IS NULL, A.OPER_DTM, from_unixtime(unix_timestamp(), 'yyyy-MM-dd HH:mm:ss')) OPER_DTM,
       IF(B.ZONE_ID IS NULL, 'E', IF(A.ZONE_ID IS NULL, 'I', 'U')) EIUD_TYPE
  FROM (SELECT ZONE_ID,
       GEO_ZONE_ID,
       GEO_ZONE_NAME,
       GEO_ZONE_SIDO_CODE,
       GEO_ZONE_SIDO_NAME,
       GEO_LATITUDE,
       GEO_LONGITUDE,
       GEO_RADIUS,
       GEO_ORG_ID,
       GEO_TYPE,
       SAVING_AFFILIATE_ID,
       SAVING_AFFILIATE_NAME,
       EXPECTATION_COUNT,
       INFORMATION1,
       INFORMATION2,
       REQUISITION_TYPE,
       TARGETING_ID,
       CREATED_BY,
       CREATED_ID,
       CREATED_NAME,
       CREATED_DATE,
       SAVING_AFFILIATE_BIZNO FROM CDC_MLF_ZONE WHERE dt='#{today}') B
       FULL OUTER JOIN 
       MLF_ZONE A
    ON trim(A.ZONE_ID) = trim(B.ZONE_ID)
) TOT
INSERT OVERWRITE TABLE MLF_ZONE
SELECT ZONE_ID,
       GEO_ZONE_ID,
       GEO_ZONE_NAME,
       GEO_ZONE_SIDO_CODE,
       GEO_ZONE_SIDO_NAME,
       GEO_LATITUDE,
       GEO_LONGITUDE,
       GEO_RADIUS,
       GEO_ORG_ID,
       GEO_TYPE,
       SAVING_AFFILIATE_ID,
       SAVING_AFFILIATE_NAME,
       EXPECTATION_COUNT,
       INFORMATION1,
       INFORMATION2,
       REQUISITION_TYPE,
       TARGETING_ID,
       CREATED_BY,
       CREATED_ID,
       CREATED_NAME,
       CREATED_DATE,
       SAVING_AFFILIATE_BIZNO, 
       OPER_DTM,
       EIUD_TYPE
INSERT OVERWRITE TABLE IAS_PROCESS_LOG PARTITION (dt='#{today}', jobId='MLF_ZONE')
SELECT 'HDFS' JOB_TYPE,
       from_unixtime(unix_timestamp(), 'yyyy-MM-dd HH:mm:ss') START_DTTM,
       from_unixtime(unix_timestamp(), 'yyyy-MM-dd HH:mm:ss') END_DTTM,
       '#{yesterday}' BASE_DT,
       COUNT(EIUD_TYPE) TOTAL_CNT,
       SUM(IF(EIUD_TYPE = 'U' OR EIUD_TYPE = 'I', 1, 0)) PROCESS_CNT,
       SUM(IF(EIUD_TYPE = 'U', 1, 0)) UPDATE_CNT,
       SUM(IF(EIUD_TYPE = 'I', 1, 0)) INSERT_CNT
;

CREATE EXTERNAL TABLE IF NOT EXISTS STG_MLF_ZONE (
    ZONE_ID BIGINT,
    GEO_ZONE_ID BIGINT,
    GEO_ZONE_NAME String,
    GEO_ZONE_SIDO_CODE String,
    GEO_ZONE_SIDO_NAME String,
    GEO_LATITUDE String,
    GEO_LONGITUDE String,
    GEO_RADIUS String,
    GEO_ORG_ID String,
    GEO_TYPE String,
    SAVING_AFFILIATE_ID String,
    SAVING_AFFILIATE_NAME String,
    EXPECTATION_COUNT BIGINT,
    INFORMATION1 String,
    INFORMATION2 String,
    REQUISITION_TYPE String,
    TARGETING_ID BIGINT,
    CREATED_BY BIGINT,
    CREATED_ID String,
    CREATED_NAME String,
    CREATED_DATE String,
    SAVING_AFFILIATE_BIZNO String,
    OPER_DTM string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY "\t"
LOCATION '#<URL>/SERVICES_IAS/MLF/STG/STG_MLF_ZONE';

INSERT OVERWRITE TABLE STG_MLF_ZONE
SELECT #<ColumnRefineList>,
       from_unixtime(unix_timestamp(), 'yyyy-MM-dd HH:mm:ss') OPER_DTM
  FROM CDC_MLF_ZONE 
 WHERE dt='#{today}'
;

dfs -mkdir #<URL>/#outputPath#;

dfs -cp #<URL>/SERVICES_IAS/MLF/STG/STG_MLF_ZONE/* #outputPath#;

